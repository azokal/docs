# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Ambroise Maupate & Julien Blanchet
# This file is distributed under the same license as the Roadiz
# documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Roadiz documentation 0.14.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-29 13:38+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

# af2c7390cd4943f8aa76fae451e0482b
#: ../../developer/themes/custom_assignations.rst:5
msgid "Extending your Twig assignation"
msgstr ""

# f552ec475a5f4c9ea6b3a20a90d68bbb
#: ../../developer/themes/custom_assignations.rst:7
msgid ""
"For a simple website theme, base assignation will work for almost every "
"cases. Using ``node`` or ``nodeSource`` data from your Twig template, you"
" will be able to render all your page fields."
msgstr ""

# df39434adb1445399c96d7f4109d281d
#: ../../developer/themes/custom_assignations.rst:11
msgid ""
"Now imagine you need to load data from another node than the one being "
"requested. Or imagine that you want to create a complex homepage which "
"displays a summary of your latest news. You will need to extend existing "
"assignated variables."
msgstr ""

# 5f632e83bf9b4be0bde7eeb7f4fc16d2
#: ../../developer/themes/custom_assignations.rst:15
msgid ""
"For example, create a simple node-type called *Page*. Add several basic "
"fields inside it such as *content* and *images*. If you well-understood "
":ref:`how to create a theme <create-theme>` section you will create a "
"*PageController.php* which look like this:"
msgstr ""

# 2622c6e59af245199eac1d3dc2be9b49
#: ../../developer/themes/custom_assignations.rst:54
msgid ""
"You will be able to render your page using "
"``themes/MyTheme/Resources/views/types/page.html.twig`` template file:"
msgstr ""

# c76be343e67b44299adbb8c0c13250b0
#: ../../developer/themes/custom_assignations.rst:75
msgid "Use theme-wide assignation"
msgstr ""

# 561054eb3eba4b1fbdf5b31bd09d2dce
#: ../../developer/themes/custom_assignations.rst:77
msgid ""
"Custom assignations are great but what can I do if I have to use the same"
" variables in several controllers? We added a special "
"``extendAssignation`` method which is called at the end of your theme "
"preparation process (``prepareThemeAssignation`` and "
"``prepareNodeSourceAssignation``). Just override it in your "
"``MyThemeApp`` main class, then every theme controllers and templates "
"will be able to use these variables."
msgstr ""

# 754eda6ba047417b8bdf289f8ce1aa6e
#: ../../developer/themes/custom_assignations.rst:84
msgid ""
"For example, you can use this method to make ``<head>`` variables "
"available for each of your website pages."
msgstr ""

# 4108e8cb6254461989171e3873c3eb7a
#: ../../developer/themes/custom_assignations.rst:108
msgid "Use *Page / Block* data pattern"
msgstr ""

# e3e699947b0d42e997313dbbfd4bebf7
#: ../../developer/themes/custom_assignations.rst:110
msgid ""
"At REZO ZERO, we often use complex page design which need removable and "
"movable parts. At first we used to create long node-types with a lot of "
"fields, and when editors needed to move content to an other position, "
"they had to cut and paste text to another field. It was long and not very"
" sexy."
msgstr ""

# 5eaef69a302f4cb8aa693b1cbd796a84
#: ../../developer/themes/custom_assignations.rst:115
msgid ""
"So we thought about a modulable way to build pages. We decided to use one"
" master node-type and several slave node-types instead of a single big "
"type. Here is what we call **Page/Block pattern**."
msgstr ""

# 3b1cb2c0efe649c0baaa2715ffa0b7bf
#: ../../developer/themes/custom_assignations.rst:118
msgid ""
"This pattern takes advantage of Roadiz node hierarchy. We create a very "
"light *Page* node-type, with an *excerpt* and a *thumbnail* fields, then "
"we create an other node-type that we will call *BasicBlock*. This block "
"node-type will have a *content* and *image* fields."
msgstr ""

# a9de881ca2764a8cbac497ca04a3645c
#: ../../developer/themes/custom_assignations.rst:122
msgid ""
"The magic comes when we add a last field into *Page* master node-type "
"called *children_nodes*. This special field will display a node-tree "
"inside your edit page. In this field parameter, we add *BasicBlock* name "
"as a default value to tell Roadiz that each *Page* nodes will be able to "
"contain *BasicBlock* nodes."
msgstr ""

# 042a760bab5542baadf68f4cf867dfca
#: ../../developer/themes/custom_assignations.rst:126
msgid ""
"So you understood that all your page data will be allocated in several "
"*BasicBlock* nodes. Then your editor will just have to change block order"
" to re-arrange your page content. That’s not all! With this pattern you "
"can join images to each block so that each paragraph can be pictured with"
" a *Document* field. No need to insert image tags right into your "
"Markdown text as you would do in a Wordpress article."
msgstr ""

# 53a80c6f233e42a6bacf3edfa70d9c19
#: ../../developer/themes/custom_assignations.rst:132
msgid "How to template *Page / Block* pattern"
msgstr ""

# e188a0ade5144deca6c91772223b00ea
#: ../../developer/themes/custom_assignations.rst:134
msgid ""
"Now that you’ve structured your data with a *Page* node-type and a "
"*BasicBlock*, how do render your data in only one page and only one URL "
"request? We will use custom assignations!"
msgstr ""

# 2491c845c7274b3190321fefabc42302
#: ../../developer/themes/custom_assignations.rst:137
msgid "Open your ``PageController.php`` file:"
msgstr ""

# 14c4579a32bd42539afa922527ea8ad7
#: ../../developer/themes/custom_assignations.rst:170
msgid ""
"You can use different *block* types in the same *page*. Just create as "
"many node-types as you need and add their name to your *Page* "
"``children_node`` default values. Then add each node-type into "
"``getChildren`` criteria using an array instead of a single value: "
"``'node.nodeType' => array($basicBlockType, $anotherBlockType)``. That "
"way, you will be able to create awesome pages with different looks but "
"with the same template (basic blocks, gallery blocks, etc)."
msgstr ""

# ddbe1743770e4b1588459b1280e9ac18
#: ../../developer/themes/custom_assignations.rst:177
msgid ""
"Now we can update your ``types/page.html.twig`` template to use your "
"assignated blocks."
msgstr ""

# 8327d385ebdf4869bd5b651251fa21af
#: ../../developer/themes/custom_assignations.rst:196
msgid ""
"*Whaaat? What is that include?* This trick will save you a lot of time! "
"We ask Twig to include a sub-template according to each block type name. "
"Eg. for a *BasicBlock* node, Twig will include a "
"``blocks/basicblock.html.twig`` file. It’s even more powerful when you "
"are using multiple block types because Twig will automatically choose the"
" right template to render each part of your page."
msgstr ""

# 5bab8ceb50e64633861875af8f11ab73
#: ../../developer/themes/custom_assignations.rst:202
msgid "Then create each of your blocks templates files in ``blocks`` folder:"
msgstr ""

# b05767fd7d074e98b7729d7b9a748af4
#: ../../developer/themes/custom_assignations.rst:225
msgid ""
"*Voilà!* This is the simplest example to demonstrate you the power of "
"*Page / Block* pattern. If you managed to reproduce this example you can "
"now try it using multiple *block* node-types, combining multiple sub-"
"templates."
msgstr ""

# 3a25dcdbfcd441608fb5c2d035921100
#: ../../developer/themes/custom_assignations.rst:231
msgid "Use block rendering"
msgstr ""

# 90ece4565b4849f39331ea8b12ab1db4
#: ../../developer/themes/custom_assignations.rst:233
msgid ""
"A few times, using *Page / Block* pattern won’t be enough to display your"
" page blocks. For example, you will occasionally need to create a form "
"inside a block, or you will need to process some data before using them "
"in your Twig template."
msgstr ""

# 5f989f8789fe44db925221fc1f446419
#: ../../developer/themes/custom_assignations.rst:238
msgid ""
"For this we added a ``render`` filter which basically create a sub-"
"request to render your block. This new request make possible to create a "
"dedicated ``Controller`` for your block."
msgstr ""

# 67225e01399c41b5b960e46d129e6927
#: ../../developer/themes/custom_assignations.rst:242
msgid ""
"Let’s take the previous example about a page with several *basic blocks* "
"inside. Imagine you have a new *contact block* to insert in your page, "
"then how would you create your form? The following code shows how to "
"“embed” a sub-request inside your block template."
msgstr ""

# 96cf75d059854b3eb7d0038fa144004b
#: ../../developer/themes/custom_assignations.rst:271
msgid ""
"Then Roadiz will look for a "
"``Themes\\MyTheme\\Controllers\\Blocks\\ContactBlockController.php`` file"
" and a ``blockAction`` method inside."
msgstr ""

# 5121785a4df04a249f16f6abe8cc944b
#: ../../developer/themes/custom_assignations.rst:313
msgid "Then create your template ``form-blocks/contactblock.html.twig``:"
msgstr ""

# a5217439f31b4b80a8fbfa8a45b47355
#: ../../developer/themes/custom_assignations.rst:328
msgid "Paginate entities using EntityListManager"
msgstr ""

# cef05085269744c1bbea1f1c918a7384
#: ../../developer/themes/custom_assignations.rst:330
msgid ""
"Roadiz implements a powerful tool to display lists and paginate them. "
"Each ``Controller`` class allows developer to use "
"``createEntityListManager`` method."
msgstr ""

# 04da57f893dc48c49435cb1f6d29bafb
#: ../../developer/themes/custom_assignations.rst:334
msgid ""
"In ``FrontendController`` inheriting classes, such as your theme ones, "
"this method is overriden to automatically use the current "
"``authorizationChecker`` to filter entities by status when entities are "
"*nodes*."
msgstr ""

# 279d95107f344aa7a34ffc399ce86af5
#: ../../developer/themes/custom_assignations.rst:338
msgid "``createEntityListManager`` method takes 3 arguments:"
msgstr ""

# 0c6178782921418f8c6d870d0f403100
#: ../../developer/themes/custom_assignations.rst:340
msgid ""
"**Entity classname**, i.e. ``RZ\\Roadiz\\Core\\Entities\\Nodes`` or "
"``GeneratedNodeSources\\NSArticle``. The great thing is that you can use "
"it on a precise ``NodesSources`` class instead of using *Nodes* or "
"*NodesSources* then filtering on *node-type*. Using a ``NS`` entity "
"allows you to filter on your own custom fields too."
msgstr ""

# 21f97217c237465eaf56e16a3647cca3
#: ../../developer/themes/custom_assignations.rst:341
msgid "**Criteria array**, (optional)"
msgstr ""

# e3846bb20ee4483ba76db4a6f4532f09
#: ../../developer/themes/custom_assignations.rst:342
msgid "**Ordering array**, (optional)"
msgstr ""

# 3f7dceb098064fa68420ed325511f79e
#: ../../developer/themes/custom_assignations.rst:344
msgid ""
"*EntityListManager* will automatically grab the current page looking for "
"your Request parameters. If ``?page=2`` is set or ``?search=foo``, it "
"will use them to filter your list and choose the right page."
msgstr ""

# b0c89f12ea2d4bff8db0c2f41f29aef6
#: ../../developer/themes/custom_assignations.rst:347
msgid ""
"If you want to handle pagination manually, you always can set it with "
"``setPage(page)`` method, which must be called **after** handling "
"*EntityListManager*. It is useful to bind page parameter in your "
"*routing* configuration."
msgstr ""

# 42151b5982b2469b8cfcf95f6bd1b53a
#: ../../developer/themes/custom_assignations.rst:358
msgid "Then, build your ``listAction`` method."
msgstr ""

# 5090ea99079d4f13b2aef7dfcbc35f70
#: ../../developer/themes/custom_assignations.rst:397
msgid ""
"Then create your ``articles-feed.html.twig`` template to display each "
"entity paginated."
msgstr ""

